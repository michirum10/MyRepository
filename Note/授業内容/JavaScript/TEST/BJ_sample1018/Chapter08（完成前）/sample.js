/***********************************************
  グローバル変数
************************************************/
// カードの山(配列)
// 自分の手札(配列)
// 相手の手札(配列)
// 勝敗フラグ(論理型)

/***********************************************
  イベントハンドラの割り当て
************************************************/

// ページの読み込みが完了したときに実行する関数を登録
window.addEventListener('load', 初期表示);

// 「カードを引く」ボタンを押したときに実行する関数を登録
document.querySelector('#ボタンid').addEventListener('click', カードを引く);

// 「勝負する」ボタンを押したときに実行する関数を登録
document.querySelector('#ボタンid').addEventListener('click', 勝負する);

// 「もう一回遊ぶ」ボタンを押したときに実行する関数を登録
document.querySelector('#ボタンid').addEventListener('click', もう一回遊ぶ);

/***********************************************
  イベントハンドラ
************************************************/
// ページの読み込みが完了したときに実行する関数
function 初期表示() {
  // シャッフル
  // 自分がカードを引く
  // 相手がカードを引く
  // 画面更新する
}

// 「カードを引く」ボタンを押したときに実行する関数
function カードを引く() {
  // 無限にカードを引けないようにif分
  if (勝敗が未決定) {
    // 自分がカードを引く
    // 相手がカードを引く
    // 画面更新する
  }
}

// 「勝負する」ボタンを押したときに実行する関数
function 勝負する() {
  // 勝敗判定は1度のみ
  if (勝敗が未決定) {
    // 勝敗を判断
    // 画面に表示
    // 勝敗判定フラグを「決定」に変更
  }
}

// 「もう一回遊ぶ」ボタンを押したときに実行する関数
function もう一回遊ぶ() {
  // 画面を初期表示に戻す
  // location.reload();でページ再読み込み
}

/***********************************************
  ゲーム関数
************************************************/
// カードの山をシャッフルする関数
function シャッフル() {
  // for loop
  for (100回繰り返す) {
    // カードの山からランダムに選んだ2枚を入れ替える*100
  }
}

// 自分がカードを引く関数
function 自分がカードを引く() {
  if (自分の手札が4枚以下) {
    // カードの山(配列)から1枚引く
    // 取り出したカードを自分の手札(配列)に追加する
  }
}

// 相手がカードを引く関数
function 相手がカードを引く() {
  if (相手の手札が4枚以下) {
    if (考える) {
      // カードの山(配列)から1枚引く
      // 取り出したカードを相手の手札(配列)に追加する
    }
  }
}
// 相手が考える関数
function 考える() {
  // 引くかどうかを戻り値で返す
}

// 画面更新する関数
function 画面更新() {
  // 自分の手札を表示
  // 手札が5枚
  for (iを5回繰り返す) {
    if (自分の手札の枚数がiより大きい) {
      // 表面の画像を表示する
    } else {
      // 表面の画像を表示する
    }
  }
  // 相手の手札を表示
  // 手札が5枚
  for (iを5回繰り返す) {
    if (相手の手札の枚数がiより大きい) {
      // 表面の画像を表示する
    } else {
      // 表面の画像を表示する
    }
  }
  // カードの合計を表示
}


// 勝敗を判断する関数
function 勝敗を判定する() {
  // 自分のカードの合計を求める
  // 相手のカードの合計を求める
  // 勝敗のパターン表に当てはめて勝敗を判定する
  // 勝敗を呼び出し元に返す

}

/***********************************************
  デバッグ関数
************************************************/
// デバッグ用の関数
function debug() {
  console.log('カードの山',カードの山);
  console.log('自分のカード',自分のカード);
  console.log('相手のカード',相手のカード);
  console.log('勝敗決定フラグ',勝敗決定フラグ);
}