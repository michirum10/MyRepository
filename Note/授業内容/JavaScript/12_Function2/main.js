// 関数について
// 変数と同じで好きな(分かりやすい)名前をつける

// 出力先の要素を習得
// documentのgetElementByIdというメソッド。
// getElementById('output')は動詞

let output = document.getElementById('output')
// 説明がエラーを起こさないための定義
値 = 0

// 関数(Function)

// オブジェクト、クラスと『.　(ピリオド)』でつながっている関数の事をメソッド(Method)と呼ぶ

// 関数の定義
// 戻り値がある

// 戻り値がないものは「サブルーチン(他の処理（関数）から呼び出される処理（関数）のこと)」、「プロシージャ(手続き、手順)」と呼ぶ

// 関数定義の書式
// 関数:Javascriptの場合は変数と同じようなもの
// 引数:正式名称『仮引数』で関数で利用する変数を呼び出し元から受け取るもの
//      『,』で区切ると複数指定できる
// 戻り値:呼び出し元に返す値
function 関数名(引数名) {
    処理
    return 戻り値
}

// 引数と戻り値は省略できる
// 必要なければ書かなくて良い
function 関数名() {
    // 処理
}


// 関数呼び出しの書式
// 関数:Javascriptの場合は変数と同じようなもの
// 値:正式名称『実引数』で関数で利用する値を関数に渡すもの
関数名(値)


// 関数の動きの説明
// 加算関数
// 関数名：add(足し算)
// 引数：x 加算対象の値1
// 引数：y 加算対象の値2
// 戻り値：x+yの結果
function add(x, y) {
    return x + y
}

let a = 3
let b = 5
output.innerHTML += `${a} + ${b} = ${add(a, b)}<br>`
// 上記の処理を行うための途中式(数学の考え方)
// 処理には優先順位があり、関数の『()』の中(引数)が最も早く動作する

// aとbが展開される(3,5)
output.innerHTML += `${a} + ${b} = ${add(3, 5)}<br>`
// addが計算される(3+5=8)
output.innerHTML += `${a} + ${b} = ${8}<br>`
// 左のaとbが展開される
output.innerHTML += `${3} + ${5} = ${8}<br>`


// デフォルト(初期値)引数
// 指定しなかったときに自動的に代入される値のこと
output.innerHTML += 'デフォルト(初期値)引数<br>'

// 仮引数に代入式(x=0,y=0)を記述すると
// 呼び出し時に値が渡されなかった(実引数なし)時
// 代わりに代入される
// デフォルト引数を定義するときは、右の仮引数が優先される(JSはエラーにはならない)
function デフォルト(x = 0, y = 0) {
    output.innerHTML += x + y + '<br>'
}
デフォルト(3, 5)
// (5)はxに代入される
デフォルト(5)
デフォルト()
デフォルト(undefined, undefined)


// ブロック(スコープ)について
output.innerHTML += 'ブロック(スコープ)について<br>'
// 下記の場合『{}』に囲まれている部分の事
function 関数名() {
}

// スコープとは
// 変数の有効範囲(寿命)の事

// スコープの種類
// グローバルスコープ
// 基本的に利用しない方が良い
// プログラム全体で利用できる範囲
// 何のブロックにも所属していない
let v = 0

// ローカル(ブロック)スコープ
// ブロックの中で利用できる範囲
// 関数のブロックに所属している
function 関数() {
    let v = 1
}

// ブロックスコープ
// ブロックの中で利用できる範囲
// 関数やif,switchなどのブロックに所属している
if (v) {
    let v = 2
}

// スコープ(let)の説明
// 再定義不可
// 関数の中だけで有効。同じ関数の中では再定義できない

// グローバルスコープ
let y = 0
output.innerHTML += y + '<br>'

function 関数() {
    // ローカル(ブロック)スコープ
    // 上のy(グローバルスコープ)とは別物
    let y = 1
    y++
    output.innerHTML += y + '<br>'
}
// 関数を呼び出す
関数()
// 出力
output.innerHTML += y + '<br>'

// スコープ(var)の説明
// 再定義可
// グローバルスコープ
var z = 0
output.innerHTML += z + '<br>'

function 関数() {
    // ローカル(ブロック)スコープ
    var z = 1
    z++
    output.innerHTML += z + '<br>'
}
// 関数を呼び出す
関数()
// 出力
output.innerHTML += y + '<br>'

// varの問題点
output.innerHTML += 'varの問題<br>'

// if (false){
if (true) {
    // varはグローバルスコープとして動いてる
    var z2 = 2
}
output.innerHTML += z2 + '<br>'

// if (false){
if (true) {
    let z3 = 2
}
output.innerHTML += z3 + '<br>'
// この２つの変数(z3)は別物